// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: internal/reencrypt/reencrypt.proto

package reencrypt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReencryptClient is the client API for Reencrypt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReencryptClient interface {
	// Sends the re-encrypted Crypt4gh header
	ReencryptHeader(ctx context.Context, in *ReencryptRequest, opts ...grpc.CallOption) (*ReencryptResponse, error)
}

type reencryptClient struct {
	cc grpc.ClientConnInterface
}

func NewReencryptClient(cc grpc.ClientConnInterface) ReencryptClient {
	return &reencryptClient{cc}
}

func (c *reencryptClient) ReencryptHeader(ctx context.Context, in *ReencryptRequest, opts ...grpc.CallOption) (*ReencryptResponse, error) {
	out := new(ReencryptResponse)
	err := c.cc.Invoke(ctx, "/reencrypt.Reencrypt/ReencryptHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReencryptServer is the server API for Reencrypt service.
// All implementations must embed UnimplementedReencryptServer
// for forward compatibility
type ReencryptServer interface {
	// Sends the re-encrypted Crypt4gh header
	ReencryptHeader(context.Context, *ReencryptRequest) (*ReencryptResponse, error)
	mustEmbedUnimplementedReencryptServer()
}

// UnimplementedReencryptServer must be embedded to have forward compatible implementations.
type UnimplementedReencryptServer struct {
}

func (UnimplementedReencryptServer) ReencryptHeader(context.Context, *ReencryptRequest) (*ReencryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReencryptHeader not implemented")
}
func (UnimplementedReencryptServer) mustEmbedUnimplementedReencryptServer() {}

// UnsafeReencryptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReencryptServer will
// result in compilation errors.
type UnsafeReencryptServer interface {
	mustEmbedUnimplementedReencryptServer()
}

func RegisterReencryptServer(s grpc.ServiceRegistrar, srv ReencryptServer) {
	s.RegisterService(&Reencrypt_ServiceDesc, srv)
}

func _Reencrypt_ReencryptHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReencryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReencryptServer).ReencryptHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reencrypt.Reencrypt/ReencryptHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReencryptServer).ReencryptHeader(ctx, req.(*ReencryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reencrypt_ServiceDesc is the grpc.ServiceDesc for Reencrypt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reencrypt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reencrypt.Reencrypt",
	HandlerType: (*ReencryptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReencryptHeader",
			Handler:    _Reencrypt_ReencryptHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/reencrypt/reencrypt.proto",
}
